#!/usr/bin/env bash
# install all the things

DOTFILES=`dirname $(dirname $(realpath -s $0))`

overwrite_all=false
backup_all=false
skip_all=false

info () {
	printf "\r\033[2K [   \033[00;34m.\033[0m] $1\n"
}

user () {
	printf "\r\033[2K [   \033[00;33m?\033[0m] $1 "
}

success () {
	printf "\r\033[2K [  \033[00;32mok\033[0m] $1\n"
}

fail () {
	printf "\r\033[2K [\033[00;31mfail\033[0m] $1\n"
	echo ''
	exit
}

link_files () {
 	ln -s $1 $2
	success "linked $1 to $2"
}

remove_file () {
    rm -rf $1
    success "removed $1"
}

backup_file () {
    mv $1 $1\.bak
    success "backed up to $1.backup"
}

update_modules () {
	info "updating git modules"
	git submodule update --init --recursive
}

install_link () {
    source=$1
    dest=$2

    # info "processing $source -> $dest"

	if [ -L $dest ] && [ "$(readlink $dest)" = "$source" ]
	then
		success "extant $dest"
	elif [ -f $dest ] || [ -d $dest ]
	then
		overwrite=false
		backup=false
		skip=false

		if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]
		then
			user "file exists: `basename $source` - [sS]kip, [oO]verwrite, [bB]ackup ?"
			read -n 1 action

			case "$action" in
				o )
					overwrite=true;;
				O )
					overwrite_all=true;;
				b )
					backup=true;;
				B )
					backup_all=true;;
				s )
					skip=true;;
				S )
					skip_all=true;;
				* )
					;;
			esac
		fi
		
		if [ "$overwrite" == "true" ] || [ "$overwrite_all" == "true" ]
		then
			remove_file $dest 
		fi

		if [ "$backup" == "true" ] || [ "$backup_all" == "true" ]
		then
            backup_file $dest
		fi

		if [ "$skip" == "true" ] || [ "$skip_all" == "true" ]
		then
		    success "skipped $source"
		else
		    link_files $source $dest
		fi
	else
		link_files $source $dest
	fi
}

install_desktop_entries () {
    info "installing desktop entries"

    overwrite_all=false
    backup_all=false
    skip_all=false

    # ensure the applications directory exists
    applications="$HOME/.local/share/applications"
    mkdir -p $applications

    # find files named .desktop, link those to .local/share/applications
    for source in `find $DOTFILES -maxdepth 2 -name \*.desktop`
    do
        dest="${applications}/`basename \"${source}\"`"
        install_link $source $dest
	done
}

install_dotfiles () {
	info "installing dotfiles"

    # find files named with a dot at the end, link those with a dot at the beginning
    # two dots at the end means put it in .config without the dot
	for source in `find $DOTFILES -maxdepth 2 -name \*.`
	do
        config=${XDG_CONFIG_HOME:="$HOME/.config"}

        # if it's a directory, it goes in .config
        if [[ -d "$source" ]]
        then
            dest="$config/`basename \"${source%.*}\"`"
        elif [[ $source = *.. ]]
        then
		    dest="$config/`basename \"${source%..*}\"`"
        else
		    dest="$HOME/.`basename \"${source%.*}\"`"
        fi

        install_link $source $dest
    done
}

update_modules
install_dotfiles
install_desktop_entries

