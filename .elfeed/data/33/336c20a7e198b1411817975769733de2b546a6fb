<em>Disclaimer:  I do not speak for Google!  These are my own views and opinions, and are not endorsed in any way by my employer, nor anyone else, for that matter.</em><br /><br />Everyone knows and quotes Joel's old chestnut, "<b>Smart</b>, and <b>Gets Things Done</b>."  It was a <a href="http://www.joelonsoftware.com/articles/fog0000000073.html">blog</a>, then a <a type="amzn" asin="1590598385">book</a>, and now it's an aphorism.<br /><br />People quote Joel's Proverb all the time because it gives us all such a nice snuggly feeling.  Why?  Because to be in this industry at all, even a bottom-feeder, you <em>have</em> to be smart.  You were probably the top kid in your elementary school class.  People probably picked on you.  You were the geek back when geeks weren't popular.  But now "smart" is fashionable.<br /><br />That's right!  All those loser kneebiter jocks in high school who played varsity and got all the girls and sported their big, winning, shark-white smiles as they barely jee-parlor-fran-saysed their way through the classes you coasted through:  where are they now?  A bunch of sorry-ass bank managers and failed insurance salesmen and suit-wearing stiffs at big law firms working for billion-dollar conglomerates where their daddies got them VP jobs where they just have to show up and putt against the other VPs on little astroturf greens in the hallways!<br /><br />That's right, los... er, well, some of them are doing OK, I guess.  "But they're not as rich as Bill Gates!"  That's the other big tautology-cum-aphorism we geeks like to pull out when we're feeling insecure.  Notwithstanding that Bill had a rich daddy and made his money through exactly the kind of corporate shenanigans that Big Meat is using on us today, with those selfsame jocks.  We like to think the more important point is that Bill, Jobs, Bezos and the other tech billionaires (all fierce, business-savvy people) were geeks, and are thus evidence of the revenge of the nerds.  And hey, tech did make a lot of money in the 80s and 90s.  So "smart" is sort of in fashion now.<br /><br />Unfortunately, "smart" is a generic enough concept that pretty much everyone in the world thinks they're smart.  This is due to the Nobel-prize-winning <a href="http://en.wikipedia.org/wiki/Dunning-Kruger_effect">Dunning-Kruger Effect</a>, which says, in effect, that people don't know when they're not smart.  <font color="purple"><em>(Note:  people have pointed out that it was an Ig-Nobel.  Me == Dumbass.  Fortunately, "me == dumbass" was more or less the point of the article, so I'll let it stand.)</em></font><br /><br />So looking for <b>Smart</b> is a bit problematic, since we aren't smart enough to distinguish it from B.S.  The best we can do is find people who we <em>think</em> are smart because they're a bit like us.<br /><br />Er, what about <b>Gets Stuff Done</b>, then?  Well, the other qualification you need to be in this industry is that you have to have produced <em>something</em>.  Anything at all.  As soon as you write your first working program, you've gotten something done.  And at that point you probably think of yourself as being a pretty hot market commodity, again because of the Dunning-Kruger Effect.<br /><br />So, like, what kind of people is this <b>Smart, and Gets Things Done</b> adage actually hiring?<br /><br />I've said it before: I thought I was a top-5% (or so) programmer for the first fifteen years I was coding.  (1987-2002).  Every time I learned something new, I thought "Gosh, I was really dumb for not knowing that, but <em>now</em> I'm definitely a superstar."  It took me fifteen frigging years before I realized that there might in fact still be "one or two things" left to learn, at which point I started looking outward and finally discovered how absolutely bambi-esquely thumperly incompetently clueless I really am.  Fifteen years!<br /><br />But hell, let's be honest here: I still think I'm smart.  We all do.  Sure, I've managed to figure out, at least partly, just how un-smart I am, but I've got the whole "I'm smart" thing so hardwired from when I was a kid surrounded by "dolts" who couldn't memorize things as fast as I could, or predict the teacher's punch line way in advance, or whatever questionable heuristic I was using for measuring my own smartness, that it's hard not to think that way.  And of course the "dolts" were way better than me at just about everything else.  And they think they're pretty smart too!  Definitely above average, anyway.<br /><br /><b>Squaaaaawk</b><br /><br />So we all think we're smart for different reasons.  Mine was memorization.  Smart, eh?  In reality I was just a giant, uncomprehending parrot.  I got my first big nasty surprise when I was in the Navy Nuclear Power School program in Orlando, Florida, and I was setting historical records for the highest scores on their exams.  The courses and exams had been carefully designed over some 30 years to maximize and then test "literal retention" of the material.  They gave you all the material in outline form, and made you write it in your notebook, and your test answers were graded on edit-distance from the original notes.  (I'm not making this up or exaggerating in the slightest.)  They had set up the ultimate parrot game, and I happily accepted.  I memorized the entire notebooks word-for-word, and aced their tests.<br /><br />They treated me like some sort of movie star &mdash; that is, until the Radar final lab exam in electronics school, in which we had to troubleshoot an actual working (well, technically, not-working) radar system.  I failed spectacularly: I'd arguably set another historical record, because I had <em>no idea</em> what to do.  I just stood there hemming and hawing and pooing myself for three hours.  I hadn't understood a single thing I'd memorized.  Hey man, I was just playing their game!  But I lost.  I mean, I still made it through just fine, but I lost the celebrity privileges in a big way.<br /><br />Having a good memory is a serious impediment to understanding.  It lets you cheat your way through life.  I've never learned to read sheet music to anywhere near the level I can play (for both guitar and piano.)  I have large-ish repertoires and, at least for guitar, good technique from lots of lessons, but since I could memorize the sheet music in one sitting, I never learned how to read it faster than about a measure a minute.  (It's not a photographic memory - I have to work a little to commit it to memory.  But it was a lot less work than learning to read the music.)  And as a result, my repertoire is only a thousandth what it could be if I knew how to read.<br /><br />My memory (and, you know, overall laziness) has made me musically illiterate.<br /><br />But when you combine the Dunning-Kruger effect (which affects me just as much as it does you) with having one or two things I've been good at in the past, it's all too easy to fall into the trap of thinking of myself as "smart", even if I know better now. All you have to do, to be "smart", is have a little competency at something, anything at all, just enough to be dangerous, and then the Dunning-Kruger Effect makes you think you're God's gift to that field, discipline, or what have you.<br /><br />This is why everyone loves <b>Smart, and Gets Things Done</b>, which Joel always writes in boldface.  We love it because right from the start it has the yummy baked-in assumption that <em>you</em> are smart, and that <em>you</em> get things done.  And it also tacitly assumes that you know how to identify other people with the same qualities!<br /><br />But... you don't.<br /><br />It sucks, but the Dunning-Kruger Effect is frighteningly universal.  It's a devil's pitchfork two horrible, boldfaced <b>prongs</b>.  First:<br /><br /><b>Incompetent people grossly overestimate their own competence</b><br /><br />We already talked about that, right?  You're a good programmer!  Heck, you're a great programmer!  You're "smart", so anything you don't know you can go look up if you need it!  Right?<br /><br />Welcome to incompetence.<br /><br />The second prong is a bit longer, and has a barbed poison tip:<br /><br /><b>Incompetent people fail to recognize genuine skill in others</b><br /><br />Both prongs are intrinsically funny when you're watching them in action in <em>someone else</em>, and they're incomprehensible when anyone tries to poke you with them.  Not necessarily offensive, mind you: you <em>might</em> get offended if someone tries to imply that you're not as competent as you feel you are, but it's more likely (per the D-K effect) that you'll simply not believe them.  Not even close.  You're smart!  They're just wrong!  Gosh!<br /><br />The second prong, that of the ability to recognize true competence, has major ramifications when we conduct interviews.  That's what Joel was writing about in <b>Smart and Gets Things Done</b>, you know: conducting technical interviews.<br /><br />How do you hire someone who's smarter than you?  How do you <em>tell</em> if someone's smarter than you?<br /><br />This is a problem I've thought about, over nearly twenty years of interviewing, and it appears that the answer is: you can't.  You just have to get lucky.<br /><br />It's easy for a candidate to <em>sound</em> smart.  Anyone can use big jargon-y words and talk the talk like nobody's business, but I'm living, breathing proof that articulacy doesn't connote any other form of intelligence.  Heck, the Markov-chain synopses of my blogs that people post in quasi-jest tend to look like I wrote them.<br /><br />All too often I find myself on interview loops where the candidate knows a seemingly astounding amount about coding, computer science, software engineering, and general industry topics, but we find out at the last minute that they can't code Hello, World in any language.<br /><br />This is, of course, one of the failure-patterns that Joel's <b>Get Things Done</b> clause is designed to catch.  But interviews are conducted under pretty artificial conditions, and as a result they wind up being most effective at hiring people who are good at interviewing.  This is a special breed of parrot, in a way.  Interviewing isn't a particularly good predictor of performance, any more than your rank in a coding competition is a predictor of real-world performance.  In fact, somewhat depressingly, there's almost no correlation whatsoever.<br /><br /><b>If interviews suck, then why do we still do them this way?</b><br /><br />Lots of reasons.  One is just history: everyone else does it that way.  Companies tend to hire pretty similar HR departments, and HR tends to guide companies towards doing it the way everyone else does it.  Same goes for technical management, which is all too often HR-driven as the company grows.<br /><br />Another is that interviewing is already a fairly time-intrusive function for the interviewers, and it tends to be miserable for the interviewees.  Trying to make the process somehow more rigorous or accurate just exacerbates these side effects.<br /><br />Another is the "rite of passage" phenomenon, wherein engineers feel that if they had to go through the gauntlet, then everyone else should, too.<br /><br />So for the most part, everyone does the same non-working variety of interviews, and hopes for the best.<br /><br />As far as identifying good people goes, the best solution I've ever seen was at Geoworks, where you were required to do a six-month internship before you could get hired full-time.  This seems to be the norm in non-tech departments at most tech companies.  They often substitute "contractor" for "intern", but it works out roughly the same.  Geoworks is the only company I've seen stick to their guns and make it mandatory for engineers.<br /><br />However, I'm convinced that it only worked because Geoworks seeded the engineering staff with great people.  The founding engineers set up a truly beautiful software engineering environment, with lots of focus on tools, mentoring, continuing education, "anarchy projects" to let off steam and encourage innovation, and a host of other goodnesses.<br /><br />I've been a contractor at companies that had no good engineers at all, literally none whatsoever.  A mandatory six-month internship at such companies would only serve to <em>lower</em> their average bar, since anybody competent would leave after the six months was up.  This doesn't contradict the D/K Effect.  It's easy to spot lackluster, soulless engineering organizations, and doing so doesn't imply that you're especially smart.<br /><br /><b>The "Extended Interview"</b><br /><br />Anyway, I've often wondered where the Geoworks founders found such great engineers.  The short answer is:  "Berkeley", but I'm really looking for something deeper than that; namely:  how did they <em>know</em>?<br /><br />Along similar lines, I've long felt that Amazon's success was due in no small part to Bezos having seeded his tech staff with great engineers.  World-class great.  I don't know where or how he found them, since, again, how do you hire someone who's smarter than you?  He's a brilliant guy, but his original choices (ex-<a href="http://en.wikipedia.org/wiki/Lucid_Inc.">Lucid</a> folks, by and large) seem a stroke of blind luck that's hard to attribute to mere genius.  I'll probably never know how it happened.  Wish I did!<br /><br />They weren't too big on software engineering, though, or more likely they all felt that time-to-market trumped everything else (and were correct, at least in their case), so Amazon is successful but lacks a high-quality software engineering culture.  It's gotten much better over the years, of course, but it's a far cry from Geoworks.  It's largely up to individual teams at Amazon to decide how much engineering to sprinkle into their coding.  There's no central group (or distributed peer group) who can tell any team how to build their software.  This is effectively mandated from the top, in fact.<br /><br />But time-to-market is a pretty powerful business force.  Maybe that's the missing link?  Lucid was founded by Dick Gabriel, the "worse is better" guy, and Amazon took the "worse is better" idea (internally) to untold new extremes.<br /><br />Dunno!  But it sure worked for them.<br /><br />Google has a process similar to the Geoworks 6-month internship idea.  Geoworks's internship was a form of "extended interview", since it was obvious even in the 1980s that the classic interview format isn't a very good predictor of performance.  At Google, you don't have to do an internship.  However, unlike at most other companies, you're not "slotted" into a real position on the tech ladder until you've been on the job at least six months.  During that time you need to prove that you can function at the level you were hired for, and if it's wrong in either direction your level is adjusted at slotting time.<br /><br />The "extended interview" (in any form) is the <em>only</em> solution I've ever seen to the horrible dilemma, <b>How do you hire someone smarter than you?</b> Or even the simpler problem, How do you identify someone who's <em>actually</em> <b>Smart, and Gets Things Done</b>?  Interviews alone just don't cut it.<br /><br />Let me say it more directly, for those of you who haven't taken this personally yet: you can't do what Joel is asking you to do.  You're not qualified.  The <b>Smart and Gets Things Done</b> approach to interviewing will only get you copies of yourself, and the work of Dunning and Kruger implies that if you hire someone better than you are, then it's entirely accidental.<br /><br />Don't get me wrong: you should still try!  Don't throw the bath and baby away.  <b>Smart and Gets Things Done</b> is a good weeder function to filter out some of the common "epic fail" types.<br /><br />But realize that this approach has a cost: it will also filter out some people who are just as good as you, if not better, or even <em>way</em> better, along dimensions that are entirely invisible to you due to Dunning-Kruger forces mostly beyond your control.<br /><br />So there's this related interviewing/hiring heuristic that I think may better approximate the kinds of people you really want to hire: <b>Done, and Gets Things Smart</b>.<br /><br />I'll take Joel's cue and write it in <b>bold</b> so you know it's important.  It's not <b>condescending</b> or anything.  Really.  Let's all recite it together, to make it catchy and stuff.  Maybe we should have a little ditty for it, so it sticks in our heads annoyingly, forever.  I think the Happy Birthday song will do nicely:<br /><br /><b>Hap-py Birth-day To Yooooooou,</b><br /><b>Done-and Geh-ets Things Smaaaart</b><br /><b>Hmmm hmm HMMMMM Hmmmm Hmmmm whoeeeeeever</b><br /><b>Done and geh-eeeeeets thiiiiiings Smaaaaaaaart</b> *clap* *clap*<br /><br />There!  You'll remember it every time anyone has a birthday.<br /><br /><b>Done, and Gets Things Smart</b><br /><br />All gentle faux-condescension aside (or as the classroom jocks would have read, "fox condesomething"), Joel's <b>Smart, and Gets Things Done</b> heuristic seems really obvious to everyone.  It has this magical "we're all smart in this together" appeal. But sadly, for the reasons I've outlined, almost everyone interprets it to mean "<b>Carbon Copy, of Myself</b>".  Great guidance gone astray!<br /><br />The <b>Done, and Gets Things Smart</b> approach is also a way of finding great people, but it recognizes that the Dunning-Kruger Effect requires some countermeasures.  It's modeled on the early successes I've witnessed at Geoworks, Amazon, and Google, all of whom had one thing in common: they hired <b>brilliant seed engineers</b>.  This boldface is really addictive when you get started on it!<br /><br />They all managed to continue hiring great people afterwards, but the seed engineers were the most important.  I'm hoping that this is intuitively obvious in much the same way that wanting smart people who get things done is intuitively obvious.<br /><br />I think you really, <em>really</em> want great seed engineers, and that this is a different class of engineer from the "pretty darn good" engineer we typically hire using Joel's oft-misinterpreted advice.<br /><br />Seed engineers.  It's key.  You can apply the "I want ideal seed engineers" rule recursively to an organization, a department, a project, a team, and even your officemates.  We're not just talking about startups.<br /><br />Let me ask you a brutally honest question: since you began interviewing, how many of the engineers you've voted thumbs-up on (i.e. "hire!"), are engineers you'd personally hire to work with you in your first startup company?  Let's say this is a hypothetical company you're going to found someday when you have just a little more financial freedom and a great idea.<br /><br />I posit that most of you, willing to admit it or not, have a lower bar for your current company than you would for your own personal startup company.<br /><br />The people you'd want to be in your startup are <em>not</em> of the <b>Smart and Gets Things Done</b> variety.<br /><br />For your startup (or, applying the recursion, for your new project at your current company), you don't want someone who's "smart".  You're not looking for "eager to learn", "picks things up quickly", "proven track record of ramping up fast".<br /><br />No!  Screw that.  You want someone who's superhumanly godlike.  Someone who can teach <em>you</em> a bunch of stuff.  Someone you admire and wish you could emulate, not someone who you think will admire and emulate you.<br /><br />You want someone who, when you give them a project to research, will come in on Monday and say: "I'm <b>Done</b>, and by the way I improved the existing infrastructure while I was at it."<br /><br />Someone who always seems to be finishing stuff so fast it makes your head spin.  That's what my <b>Done</b> clause means.  It means they're frigging done all the time.<br /><br />I met my first <b>Done, and Gets Things Smart</b> engineers back at Geoworks.  This was looong before I had any sort of a clue that I suck as an engineer, but these folks (Andrew Wilson and Chris Thomas, if you really must know) were <em>weird</em>.  They never seemed to be working that hard, but they were not only 10x as productive as their peers, they also managed technical feats that were quite frankly too scary for anyone else.  They could (as just one trait) dive in and learn new languages and make fixes to tools that the rest of us assumed were, I dunno, stuff you'd normally pay a vendor to fix.  They dove into the hairiest depths of every code base they encountered and didn't just add features and make fixes; they waved some sort of magic wand and improved the system while they were in there: they would <b>Get Things Smart</b>.  Make the systems smarter, that is.  Sort of like getting your act together, but <em>they</em>'d do it for <em>your</em> code.<br /><br />I've met many more such engineers along the way.  They're out there.  They're better than you.  They were better twenty years ago than I am today or ever will be.  Maybe it's natural ability.  Maybe it's luck in education or upbringing.  Maybe they have a secret recipe for improving rapidly and learning utter fearlessness.  I don't know.  But I've met 'em, and they aren't "smart".  They're abso-flutely fugging brilliant.<br /><br />You can't interview these people.  For starters, they're not interested; these are the people that companies hold on to as long as humanly or companyly possible.  The kinds of people that companies file lawsuits over when they're recruited away.<br /><br />You can only find <b>Done, and Gets Things Smart</b> people in two ways, and one of them I still don't understand very well.<br /><br />The first way is to get real lucky and have one as a coworker or classmate.  You work with them for a few years and come to realize they're just cut from a finer cloth than you and your other unwashed cohorts.  You may be friends with some of them, which helps with the recruiting a little, but not necessarily.  The important thing is that you <em>recognize</em> them, even if you don't know what makes them tick.<br /><br />This is the one great hope we programmers have for fighting the Dunning-Kruger Effect, the one hope we have for getting something better than the average "just like me" Solid Plugger Joe Nobody you pick up with the <b>Smart, and Gets Things Done</b> approach.  Our only "out" is that working side-by-side with someone will show us clearly when they vastly outclass us.<br /><br />Your devious little mind will come up with all sorts of rationalizations for why they're so damn good, so you can continue to think of yourself as <b>Smart, and Gets Things Done</b> material.  You may conclude that they're just a genetic anomaly, and it's no fair even trying to compare yourself to someone who obviously has an unfair gift from the heavens.  Or you may tell yourself that they're just a domain expert in various domains that you don't "need" right now.  Or you may simply choose not to think about it too much.  Good Old Compartmentalization to the rescue!<br /><br />But working with them directly <em>will</em> show you when they're better.  It's the only way.  You'll gradually realize that your math deficiencies aren't just something that you might need to beef up on if you ever "need to"; you'll see that virtually every problem space has a mathematical modeling component that you were blissfully unaware of until <b>Done, and Gets Things Smart</b> gal points it out to you and says, "There's an infinitely smarter approach, which by the way I implemented over the weekend."    You stare slack-jawed for a little while, and then she says:  "Here's a ball.  Why don't you go bounce it?"<br /><br />These people aren't just pure gold; they're golden-egg-laying geese.  They are the ones you want to bring with you to your own startup.  Not the <b>Smart, and Gets Things Done, Just As Soon As I Read Up On The Subject, On The Company's Dime</b> riff-raff like you and me.  No.  They're your seed engineers:  the ones who will make or break your company with both their initial technical output and the engineering-culture decisions they put into place &mdash; decisions that will largely determine how the company works for the next twenty years.<br /><br />I've been debating whether to say this, since it'll smack vaguely of obsequiousness, but I've realized that one of the Google seed engineers (exactly one) is almost singlehandedly responsible for the amazing quality of Google's engineering culture.  And I mean both in the sense of having established it, and also in the sense of keeping the wheel spinning.  I won't name the person, and for the record he almost certainly loathes me, for reasons that are my own damn fault.  But I'd hire him in a heartbeat: more evidence, I think, that the <b>Done, and Gets Things Smart</b> folks aren't necessarily your friends.  They're just people you're lucky enough to have worked with.<br /><br />At first it's entirely non-obvious who's responsible for Google's culture of engineering discipline: the design docs, audited code reviews, early design reviews, readability reviews, resisting introduction of new languages, unit testing and code coverage, profiling and performance testing, etc.  You know.  The whole gamut of processes and tools that quality engineering organizations use to ensure that code is open, readable, documented, and generally non-shoddy work.<br /><br />But if you keep an eye on the emails that go out to Google's engineering staff, over time a pattern emerges: there's one superheroic dude who's keeping us all in line.<br /><br />How do you interview for such a person?  You can't!  Everyone will tell you they're God's Gift to engineering quality.  Everyone knows how to give it impressive lip service.  Heck, there are lots of people who take it way too far and try to gridlock the organization in their over-enthusiasm, when what you really want is a balanced and pragmatic approach.  I'd argue that it's virtually impossible to detect these "soft skills" in a classic interview setting, except to the extent that you're hiring your own clone, which according to our thesis here, is NOT what you want.  You want <b>Done, and Gets Things Smart</b>: done faster than you, and made <em>your</em> system smarter!<br /><br />I'm guessing that Google's founders worked with this person in school, enough to recognize his valuable talents.  Hence they used Identification Approach #1:  get lucky in who you work with.<br /><br />Incidentally, they hired plenty of other brilliant seed engineers who were equally responsible for Google's great technical infrastructure.  I'm just using this one guy as an illustrative example.  But you really want the <b>Done, and Gets Things Smart</b> people on every team.  If you could mix in one <b>Done, and Gets Things Smart</b> person with every five to ten <b>Smart, and Gets Things Done</b> people, then you'd be in good shape, since the latter, being "smart", can hopefully learn a lot from the former.<br /><br />But when you're starting a company, or an organization, or a big project, the need for <b>Done, and Gets Things Smart</b> seed engineers is <em>desperate</em>.  It's dire, in the sense that if you don't get the right seed people in place, you're dooming your organization to mediocrity, if you manage to succeed at all.<br /><br />And it's direst when you're in a startup, because you can't pillage people from elsewhere in your organization who you know are good.  And because <b>Done, and Gets Things Smart</b> people are worth their weight in refined plutonium, they're probably reasonably happy in their current position.<br /><br />So let's assume you're looking at the vast ocean of programmers, all of whom are self-professed superstars who've gotten lots of "stuff" done, and you want to identify not the superstars, but the super-<em>heroes</em>.<br /><br />How do you do it?  Well, Brian Dougherty of Geoworks did it somehow.  Jeff Bezos did it somehow.  Larry and Sergey did it somehow.  I'm willing to bet good money that <em>every</em> successful tech company out there had some freakishly good seed engineers.  But a lot of company heads who make these decisions aren't necessarily industry programmers, and they still manage to find some world-class people in all the noise.  So there must be a second way to identify <b>Done, and Gets Things Smart</b>.<br /><br />I think Identification Approach #2, and this is the one I don't understand very well, is that you "ask around".  You know.  You manually perform the graph build-and-traversal done by the Facebook "Smartest Friend" plug-in, where you ask everyone to name the best engineer they know, and continue doing that until it converges.<br /><br />I think this might work, assuming you have lots of connections initially (lots of roots for your graph), so you don't get stuck in some slummy local minimum.<br /><br />I've seen companies go to university professors and ask them who their brightest students are; that's a variant of this approach, although it usually only turns up <em>future</em> <b>Done, and Gets Things Smart</b> engineers.  Every once in a very rare while you'll get a recent college grad in this category, but I think more often they tend to be experienced enough to make Gandalf feel young again.<br /><br />Because technical brilliance, seemingly superhuman productivity, and near-militaristic adherence to software discipline aren't enough.  They also need leadership skills.  They don't have to be <em>great</em> leaders; in fact in a pinch, just being bossy might work for a while, as long as they're bossing people in the right directions.  But they need to have the ability to guide the organization (or new team, or whatever) in uniformly excellent directions, which requires <em>some</em> leadership, even if it's bad or amateurish leadership.<br /><br />As much as I suspect Approach #2 may work, I think Approach #1 is probably more reliable.  Take a closer look at your coworkers who are doing things that you "could learn if you ever need it".  Read up on the old Dunning-Kruger Effect.  I recommend it with irony dialed at 11, since personally I have yet to read more than the Wikipedia article and a few other articles here and there.  I'll read it if I "need to".  Psh.<br /><br /><b>Done, and Gets Things Smart</b><br /><br />Not superstars: superheroes!  People who are freakishly good at what they do.  People who finish things so fast that they seem to have paranormal assistance.  People who can take in any new system or design for all intents instantaneously, with no "ramp-up", and who can immediately bring insights to bear that are quite simply beyond your rustic abilities.<br /><br />Those are the folks you want.  I'm not going to tell you: "Don't settle for less."  Far from it.  You still want to hire the <b>Smart, and Gets Things Done</b> folks.  But those folks have a long way to grow, and they probably have absolutely no idea just how far it is.  So you want some <b>Done, and Gets Things Smart</b> people to guide them.<br /><br />And now, to play us out...<br /><br />Dooooone and Ge-ets Things Smart,<br />Done and Ge-ets Things Smart,<br />Done and Geeee-eeeets Thiiings Smaaaa-aaaart,<br />Done and Ge-ets Things Smart!