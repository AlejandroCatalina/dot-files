<p>For all the available abstractions, the #1 tool of any
<a href="http://clojure.org">Clojure</a> and
<a href="http://clojurescript.org">ClojureScript</a> programmer is the humble
function. This being true it becomes extremely important to optimize
this common operation. This is not quite as straightforward as it may
seem when compiling to JavaScript due to the fact that many Clojure
and thus ClojureScript functions leverage multiple arities.</p>

<p>On the JVM this is handled via the <code>clojure.lang.IFn</code> interface as the JVM
already has good support for methods with multiple arities. When writing
JavaScript by hand this feature is simulated by dispatching on the
<code>length</code> property of the magic <code>arguments</code> object available to any
JavaScript function. However using the <code>arguments</code> object is not free
so we would rather not pay this cost if we don&#39;t have to.</p>

<p>In the following we&#39;ll dig into the JavaScript generated by the
ClojureScript compiler and the differences between the available
optimization settings. All you need is an install of
<a href="http://www.oracle.com/technetwork/java/javase/overview/java8-2100321.html">Java 8</a>.</p>

<p>Run the following in a terminal in a directory of your choosing:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">mkdir -p compiler_fun/src/compiler_fun
cd compiler_fun
touch src/compiler_fun/core.cljs
curl -OL https://github.com/clojure/clojurescript/releases/download/r3123/cljs.jar
touch build.clj
</code></pre></div>
<p>Use your favorite text editor to edit <code>src/compiler_fun/core.cljs</code>. Make
it look like the following:</p>
<div class="highlight"><pre><code class="language-clj" data-lang="clj"><span class="p">(</span><span class="kd">ns </span><span class="nv">compiler-fun.core</span><span class="p">)</span>

<span class="p">(</span><span class="nb">nth </span><span class="p">[</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span><span class="p">]</span> <span class="mi">4</span> <span class="ss">:oops</span><span class="p">)</span>
</code></pre></div>
<p>Let&#39;s compile this simple program. Edit <code>build.clj</code> to look like the following:</p>
<div class="highlight"><pre><code class="language-clj" data-lang="clj"><span class="p">(</span><span class="nf">require</span> <span class="ss">&#39;cljs.closure</span><span class="p">)</span>

<span class="p">(</span><span class="nf">cljs.closure/build</span> <span class="s">&quot;src&quot;</span>
 <span class="p">{</span><span class="ss">:output-to</span> <span class="s">&quot;out/main.js&quot;</span>
  <span class="ss">:verbose</span> <span class="nv">true</span><span class="p">})</span>
</code></pre></div>
<p>Let&#39;s compile:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">java -cp cljs.jar:src clojure.main build.clj
</code></pre></div>
<p>Examine <code>out/compiler_fun/core.js</code>. Notice that <code>nth</code> got compiled to
something like the following:</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">cljs</span><span class="p">.</span><span class="nx">core</span><span class="p">.</span><span class="nx">nth</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span><span class="k">new</span> <span class="nx">cljs</span><span class="p">.</span><span class="nx">core</span><span class="p">.</span><span class="nx">PersistentVector</span><span class="p">(...));</span>
</code></pre></div>
<p>You&#39;re probably wondering why we would do the obviously slow thing and
go through <code>call</code> here? In ClojureScript data structures are functions
too, by invoking through <code>call</code> we can have higher order call sites
that can invoke data structures as well as functions.</p>

<p>If we examine <code>out/cljs/core.js</code> and search for the value of
<code>cljs.core.nth</code> we&#39;ll see a fairly large function that is invoked
immediately. This function creates the arity dispatcher. You&#39;ll see
that the dispatcher looks something like the following and
interestingly has the different arities assigned as properties as
well. We see how the properties are used shortly:</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">cljs$core$nth</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">coll</span><span class="p">,</span> <span class="nx">n</span><span class="p">,</span> <span class="nx">not_found</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">switch</span> <span class="p">(</span><span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">case</span> <span class="mi">2</span><span class="o">:</span>
            <span class="k">return</span> <span class="nx">cljs$core$nth__2</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">coll</span><span class="p">,</span> <span class="nx">n</span><span class="p">);</span>
        <span class="k">case</span> <span class="mi">3</span><span class="o">:</span>
            <span class="k">return</span> <span class="nx">cljs$core$nth__3</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">coll</span><span class="p">,</span> <span class="nx">n</span><span class="p">,</span> <span class="nx">not_found</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">throw</span> <span class="p">(</span><span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;Invalid arity: &#39;</span> <span class="o">+</span> <span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span><span class="p">));</span>
<span class="p">};</span>
<span class="nx">cljs$core$nth</span><span class="p">.</span><span class="nx">cljs$core$IFn$_invoke$arity$2</span> <span class="o">=</span> <span class="nx">cljs$core$nth__2</span><span class="p">;</span>
<span class="nx">cljs$core$nth</span><span class="p">.</span><span class="nx">cljs$core$IFn$_invoke$arity$3</span> <span class="o">=</span> <span class="nx">cljs$core$nth__3</span><span class="p">;</span>
<span class="k">return</span> <span class="nx">cljs$core$nth</span><span class="p">;</span>
</code></pre></div>
<p>Why do we use <code>call</code> again here paired with <code>this</code>? This is because
the dispatcher might end up as a method on a data structure. While
useless in this context, we can keep the compiler uniform. We won&#39;t be
going through the dispatcher in production anyway.</p>

<p>Let&#39;s change <code>build.clj</code> to the following:</p>
<div class="highlight"><pre><code class="language-clj" data-lang="clj"><span class="p">(</span><span class="nf">require</span> <span class="ss">&#39;cljs.closure</span><span class="p">)</span>

<span class="p">(</span><span class="nf">cljs.closure/build</span> <span class="s">&quot;src&quot;</span>
  <span class="p">{</span><span class="ss">:output-to</span> <span class="s">&quot;out/main.js&quot;</span>
   <span class="ss">:optimizations</span> <span class="ss">:simple</span>
   <span class="ss">:static-fns</span> <span class="nv">true</span>
   <span class="ss">:pretty-print</span> <span class="nv">true</span>
   <span class="ss">:verbose</span> <span class="nv">true</span><span class="p">})</span>

<span class="p">(</span><span class="nf">System/exit</span> <span class="mi">0</span><span class="p">)</span>
</code></pre></div>
<p>And rebuild:</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">java</span> <span class="o">-</span><span class="nx">cp</span> <span class="nx">cljs</span><span class="p">.</span><span class="nx">jar</span><span class="o">:</span><span class="nx">src</span> <span class="nx">clojure</span><span class="p">.</span><span class="nx">main</span> <span class="nx">build</span><span class="p">.</span><span class="nx">clj</span>
</code></pre></div>
<p>This time we examine <code>out/main.js</code>. Since we use a Google Closure
optimization pass we end up with a single JavaScript file. By setting
<code>:static-fns</code> we are asking the ClojureScript compiler to leverage
static information. If we look at the end of the file we&#39;ll see
something like this:</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">cljs</span><span class="p">.</span><span class="nx">core</span><span class="p">.</span><span class="nx">nth</span><span class="p">.</span><span class="nx">cljs$core$IFn$_invoke$arity$3</span><span class="p">(</span><span class="k">new</span> <span class="nx">cljs</span><span class="p">.</span><span class="nx">core</span><span class="p">.</span><span class="nx">PersistentVector</span><span class="p">(...));</span>
</code></pre></div>
<p>The indirection of <code>call</code> has disappeared which means we&#39;re not
switching on <code>arguments</code> anymore. The ClojureScript compiler has
static information about <code>nth</code>, it knows precisely what arities it
supports and can optimize the call.</p>

<p>Why don&#39;t we always do this? The problem is that doing so for
development would break redefinition. Many ClojureScript programmers
enjoy redefining running programs as evidenced by the popularity of
REPL driven development and even more radical tools like
<a href="https://github.com/bhauman/lein-figwheel">Figwheel</a>.</p>

<p>There&#39;s one final production optimization. In the above form many
JavaScript engines do not optimize nested property accesses like
this. Google Closure in advanced compilation mode will collapse the
namespace convention.</p>

<p>Change your <code>build.clj</code> to the following:</p>
<div class="highlight"><pre><code class="language-clj" data-lang="clj"><span class="p">(</span><span class="nf">require</span> <span class="ss">&#39;cljs.closure</span><span class="p">)</span>

<span class="p">(</span><span class="nf">cljs.closure/build</span> <span class="s">&quot;src&quot;</span>
  <span class="p">{</span><span class="ss">:output-to</span> <span class="s">&quot;out/main.js&quot;</span>
   <span class="ss">:optimizations</span> <span class="ss">:advanced</span>
   <span class="ss">:pretty-print</span> <span class="nv">true</span>
   <span class="ss">:pseudo-names</span> <span class="nv">true</span>
   <span class="ss">:verbose</span> <span class="nv">true</span><span class="p">})</span>

<span class="p">(</span><span class="nf">System/exit</span> <span class="mi">0</span><span class="p">)</span>
</code></pre></div>
<p>And rebuild:</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">java</span> <span class="o">-</span><span class="nx">cp</span> <span class="nx">cljs</span><span class="p">.</span><span class="nx">jar</span><span class="o">:</span><span class="nx">src</span> <span class="nx">clojure</span><span class="p">.</span><span class="nx">main</span> <span class="nx">build</span><span class="p">.</span><span class="nx">clj</span>
</code></pre></div>
<p>We pretty-print and enable <code>:pseudo-names</code> so that we can see human
readable output. Now if we look at the last line of <code>out/main.js</code>
we&#39;ll see:</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">$cljs$core$nth$$</span><span class="p">.</span><span class="nx">$cljs$core$IFn$_invoke$arity$3$</span><span class="p">(...);</span>
</code></pre></div>
<p>The nested property access is gone. This code will execute
significantly faster than the development version.</p>

<p>Future posts will cover protocol dispatch, type inference, arithmetic,
and other neat things we&#39;re doing to ensure that ClojureScript is
zippy across JavaScript engines old and new.</p>
