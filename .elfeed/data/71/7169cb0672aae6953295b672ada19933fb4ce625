<p><strong>Update</strong> <em>(November 22, 2014)</em>: I fixed a fundamental flaw in the section
about argument processing, <a href="https://github.com/lunaryorn/blog/issues/15">reported by a reader of this blog</a>.</p>

<hr />

<p>Emacs isn’t just an editor, it’s an entire Emacs Lisp interpreter and
environment.  We can use Emacs Lisp not only to extend and customize our
beloved editor, but also to write entire programs and applications.  Nic
Ferrier’s <a href="https://github.com/nicferrier/elnode">elnode</a> server is probably the most ambitious Emacs Lisp
application of this sort, but we can start at a smaller scale and try to write
our shell scripts and tools with Emacs Lisp.</p>

<p>However, it turns out that writing programs in Emacs Lisp is more intricate than
it seems at a first glance.  Emacs decades-long history as interactive
application have left deep marks in Emacs and Emacs Lisp, which make independent
noninteractive scripts surprisingly difficult.</p>

<!--more-->

<h1 id="making-emacs-lisp-scripts-executable">Making Emacs Lisp scripts executable</h1>

<p>Nowadays Emacs has a convenient <code class="highlighter-rouge">--script</code> option to load and evaluate a
specific file<sup id="fnref:1"><a href="#fn:1" class="footnote">1</a></sup>, but how to make a proper shebang out of it?  The naive
attempt won’t do:</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="err">#</span><span class="nv">!/usr/bin/emacs</span> <span class="nv">--script</span>
<span class="p">(</span><span class="nv">message</span> <span class="s">"Hello world"</span><span class="p">)</span>
</code></pre>
</div>

<p>Emacs is not <code class="highlighter-rouge">/bin/sh</code>, and its location varies between different systems.
There may even be different Emacs versions at different places.  For instance,
on OS X <code class="highlighter-rouge">/usr/bin/emacs</code> is an outdated Emacs 22, and the “real” Emacs is
typically installed via Homebrew at <code class="highlighter-rouge">/usr/local/bin/emacs</code>.</p>

<p>Normally, we’d accommodate these differences with <code class="highlighter-rouge">/usr/bin/env</code>:</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="err">#</span><span class="nv">!/usr/bin/env</span> <span class="nv">emacs</span> <span class="nv">--script</span>
<span class="p">(</span><span class="nv">message</span> <span class="s">"Hello world"</span><span class="p">)</span>
</code></pre>
</div>

<p>But this just raises another portability issue:  Linux doesn’t split subsequent
arguments in the shebang, and sends <code class="highlighter-rouge">emacs --script</code> as a <em>single</em> argument to
<code class="highlighter-rouge">/usr/bin/env</code>, which doesn’t really do the trick.</p>

<p>To make our script executable in a portable and reliable way, we need to resort
to some very dirty trickery<sup id="fnref:2"><a href="#fn:2" class="footnote">2</a></sup>:</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="c">#!/bin/sh</span>
<span class="s2">":"</span>; <span class="nb">exec </span>emacs --script <span class="s2">"</span><span class="nv">$0</span><span class="s2">"</span> <span class="s2">"</span><span class="nv">$@</span><span class="s2">"</span> <span class="c"># -*- mode: emacs-lisp; lexical-binding: t; -*-</span>
<span class="o">(</span>message <span class="s2">"Hello world"</span><span class="o">)</span>
</code></pre>
</div>

<p>This wraps the Emacs Lisp code into a POSIX shell script which calls out to
<code class="highlighter-rouge">emacs</code> with appropriate arguments.  The semicolon in the second line hides the
<code class="highlighter-rouge">exec</code> statement from Emacs, and the no-op colon statement turns this into a
proper sequence statement for the shell.  The colon in turn is quoted to make it
appear as string literal to Emacs Lisp.</p>

<p>The file local variables tell Emacs to use Emacs Lisp Mode for the script,
regardless of the shebang, and to enable lexical binding.</p>

<p>This particularly evil trick works reliably with any POSIX shell.  Even better,
we can now pass arbitrary arguments to the <code class="highlighter-rouge">emacs</code> executable, which allows us
to get rid of a little nuisance of <code class="highlighter-rouge">--script</code>.</p>

<h1 id="inhibiting-site-start">Inhibiting site-start</h1>

<p>The <a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Initial-Options.html#index-g_t_002d_002dscript-4535d">–script</a> option is essentially just a shortcut for <code class="highlighter-rouge">--batch -l</code>,
i.e. enter batch mode and load the given file.  Batch Mode mainly means that
Emacs will not create a frame, but instead exit after processing all command
line arguments (which includes evaluating our script).  Besides, <a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Initial-Options.html#index-g_t_002d_002dbatch-4534">–batch</a>
also disables the user initialization file.  However, it still processes the
global site initialization file:</p>

<blockquote>
  <p><code class="highlighter-rouge">--batch</code> implies <code class="highlighter-rouge">-q</code> (do not load an initialization file), but
<code class="highlighter-rouge">site-start.el</code> is <em>loaded nonetheless</em>. It also causes Emacs to exit
after processing all the command options. In addition, it disables auto-saving
except in buffers for which auto-saving is explicitly requested.</p>
</blockquote>

<p>The global site initialization is frequently a huge kitchen sink which sets up
globally installed packages and adds several seconds to Emacs’ startup time in
the worst case.  Besides, it’s not really a good idea to load arbitrary packages
before our script even gets a chance to run.</p>

<p>We can opt out of the global site initialization by adding <code class="highlighter-rouge">--quick</code> to the
<code class="highlighter-rouge">emacs</code> options of our script, which gives us a bare-bones Emacs without any
initialization:</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="err">#</span><span class="nv">!/bin/sh</span>
<span class="s">":"</span><span class="c1">; exec emacs --quick --script "$0" "$@" # -*- mode: emacs-lisp; lexical-binding: t; -*-</span>
<span class="p">(</span><span class="nv">message</span> <span class="s">"Hello world"</span><span class="p">)</span>
</code></pre>
</div>

<p>If you need to, you can still load the global site initialization <em>explicitly</em>
from <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Init-File.html#index-site_002drun_002dfile">site-run-file</a>:</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="p">(</span><span class="nb">load</span> <span class="nv">site-run-file</span> <span class="ss">'no-error</span> <span class="ss">'no-message</span><span class="p">)</span>
</code></pre>
</div>

<h1 id="processing-command-line-arguments">Processing command line arguments</h1>

<p>Emacs exposes the command line arguments in <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Command_002dLine-Arguments.html#index-command_002dline_002dargs_002dleft">command-line-args-left</a> alias
<code class="highlighter-rouge">argv</code><sup id="fnref:3"><a href="#fn:3" class="footnote">3</a></sup>:</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="err">#</span><span class="nv">!/bin/sh</span>
<span class="s">":"</span><span class="c1">; exec emacs --quick --script "$0" "$@" # -*- mode: emacs-lisp; lexical-binding: t; -*-</span>

<span class="p">(</span><span class="nv">message</span> <span class="s">"Hello: %S"</span> <span class="nv">argv</span><span class="p">)</span>
</code></pre>
</div>

<div class="highlighter-rouge"><pre class="highlight"><code>$ ./hello.el 'John Doe'
Hello: ("John Doe")
</code></pre>
</div>

<p>Passing options doesn’t work that well, though:</p>

<div class="highlighter-rouge"><pre class="highlight"><code>$ ./hello.el --greeting 'Good morning %s!' 'John Doe'
Hello: ("--greeting" "Good morning %s!" "John Doe")
Unknown option `--greeting'
</code></pre>
</div>

<p>Emacs tries to interpret <code class="highlighter-rouge">--greeting</code> on its own, and rightfully complains that
it has never heard of any such option.  How do we keep Emacs away from our
options?</p>

<p>The source code of <code class="highlighter-rouge">startup.el</code>, more precisely the function <code class="highlighter-rouge">command-line-1</code>,
reveals the solution:  Emacs processes all command line arguments <em>immediately</em>,
in order of their appearance.  After processing, each argument is <em>removed</em> from
<code class="highlighter-rouge">argv</code>, hence the name <code class="highlighter-rouge">command-line-args-left</code>.</p>

<p>Since <code class="highlighter-rouge">command-line-args-left</code> aka <code class="highlighter-rouge">argv</code> is a global variable, we can just
remove all remaining arguments from <code class="highlighter-rouge">argv</code> before our script exits:</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="err">#</span><span class="nv">!/bin/sh</span>
<span class="s">":"</span><span class="c1">; exec emacs --quick --script "$0" "$@" # -*- mode: emacs-lisp; lexical-binding: t; -*-</span>

<span class="p">(</span><span class="nv">message</span> <span class="s">"Hello: %S"</span> <span class="nv">argv</span><span class="p">)</span>
<span class="p">(</span><span class="k">setq</span> <span class="nv">argv</span> <span class="no">nil</span><span class="p">)</span>
</code></pre>
</div>

<div class="highlighter-rouge"><pre class="highlight"><code>$ ./hello.el --greeting 'Good morning %s!' 'John Doe'
Hello: ("--greeting" "Good morning %s!" "John Doe")
</code></pre>
</div>

<p>Alternatively, we can also just force Emacs to exit early, which is good style
anyway:</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="err">#</span><span class="nv">!/bin/sh</span>
<span class="s">":"</span><span class="c1">; exec emacs --quick --script "$0" "$@" # -*- mode: emacs-lisp; lexical-binding: t; -*-</span>

<span class="p">(</span><span class="nv">message</span> <span class="s">"Hello: %S"</span> <span class="nv">argv</span><span class="p">)</span>
<span class="p">(</span><span class="nv">kill-emacs</span> <span class="mi">0</span><span class="p">)</span>
</code></pre>
</div>

<p>However, as a reader of this blog <a href="https://github.com/lunaryorn/blog/issues/15">pointed out</a> that is still not enough.
Emacs ignores our custom arguments now, but it will still try to process its
own.  This means that we can’t have a <code class="highlighter-rouge">--version</code> argument in our script:</p>

<div class="highlighter-rouge"><pre class="highlight"><code>$ ./hello.el --version
GNU Emacs 25.0.50.1
Copyright (C) 2014 Free Software Foundation, Inc.
GNU Emacs comes with ABSOLUTELY NO WARRANTY.
You may redistribute copies of Emacs
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING.
</code></pre>
</div>

<p>Emacs printed its own version and exited before our script even saw the
<code class="highlighter-rouge">--version</code> argument.  We need to use the standard double-dash <code class="highlighter-rouge">--</code> argument to
separate Emacs options from arguments, so that our script can unaffectedly
process what Emacs now considers mere arguments<sup id="fnref:4"><a href="#fn:4" class="footnote">4</a></sup>:</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="err">#</span><span class="nv">!/bin/sh</span>
<span class="s">":"</span><span class="c1">; exec emacs --quick --script "$0" -- "$@" # -*- mode: emacs-lisp; lexical-binding: t; -*-</span>

<span class="p">(</span><span class="nv">message</span> <span class="s">"Hello: %S"</span> <span class="nv">argv</span><span class="p">)</span>
<span class="p">(</span><span class="nv">kill-emacs</span> <span class="mi">0</span><span class="p">)</span>
</code></pre>
</div>

<p>Now we get the <code class="highlighter-rouge">--version</code> argument in our script, but unfortunately the
separator as well, so we need to remember to drop the first argument:</p>

<div class="highlighter-rouge"><pre class="highlight"><code>$ ./hello.el --version
Hello: ("--" "--version")
</code></pre>
</div>

<p>Typically, you’ll process all arguments in a loop, <code class="highlighter-rouge">pop</code>ing each argument as it
is processed.  Initially, you need to pop the first argument to remove the
argument separator:</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="err">#</span><span class="nv">!/bin/sh</span>
<span class="s">":"</span><span class="c1">; exec emacs --quick --script "$0" -- "$@" # -*- mode: emacs-lisp; lexical-binding: t; -*-</span>

<span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">greeting</span> <span class="s">"Hello %s!"</span><span class="p">)</span>
      <span class="nv">options-done</span>
      <span class="nv">names</span><span class="p">)</span>
  <span class="p">(</span><span class="nb">pop</span> <span class="nv">argv</span><span class="p">)</span>  <span class="c1">; Remove the -- separator</span>
  <span class="p">(</span><span class="nv">while</span> <span class="nv">argv</span>
    <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">option</span> <span class="p">(</span><span class="nb">pop</span> <span class="nv">argv</span><span class="p">)))</span>
      <span class="p">(</span><span class="nb">cond</span>
       <span class="p">(</span><span class="nv">options-done</span> <span class="p">(</span><span class="nb">push</span> <span class="nv">option</span> <span class="nv">names</span><span class="p">))</span>
       <span class="c1">;; Don't process options after "--"</span>
       <span class="p">((</span><span class="nb">string=</span> <span class="nv">option</span> <span class="s">"--"</span><span class="p">)</span> <span class="p">(</span><span class="k">setq</span> <span class="nv">options-done</span> <span class="no">t</span><span class="p">))</span>
       <span class="p">((</span><span class="nb">string=</span> <span class="nv">option</span> <span class="s">"--greeting"</span><span class="p">)</span>
        <span class="p">(</span><span class="k">setq</span> <span class="nv">greeting</span> <span class="p">(</span><span class="nb">pop</span> <span class="nv">argv</span><span class="p">)))</span>
       <span class="c1">;; --greeting=Foo</span>
       <span class="p">((</span><span class="nv">string-match</span> <span class="s">"\\`--greeting=\\(\\(?:.\\|\n\\)*\\)\\'"</span> <span class="nv">option</span><span class="p">)</span>
        <span class="p">(</span><span class="k">setq</span> <span class="nv">greeting</span> <span class="p">(</span><span class="nv">match-string</span> <span class="mi">1</span> <span class="nv">option</span><span class="p">)))</span>
       <span class="p">((</span><span class="nv">string-prefix-p</span> <span class="s">"--"</span> <span class="nv">option</span><span class="p">)</span>
        <span class="p">(</span><span class="nv">message</span> <span class="s">"Unknown option: %s"</span> <span class="nv">option</span><span class="p">)</span>
        <span class="p">(</span><span class="nv">kill-emacs</span> <span class="mi">1</span><span class="p">))</span>
       <span class="p">(</span><span class="no">t</span> <span class="p">(</span><span class="nb">push</span> <span class="nv">option</span> <span class="nv">names</span><span class="p">)))</span>

      <span class="p">(</span><span class="nb">unless</span> <span class="p">(</span><span class="nb">&gt;</span> <span class="p">(</span><span class="nb">length</span> <span class="nv">greeting</span><span class="p">)</span> <span class="mi">0</span><span class="p">)</span>
        <span class="p">(</span><span class="nv">message</span> <span class="s">"Missing argument for --greeting!"</span><span class="p">)</span>
        <span class="p">(</span><span class="nv">kill-emacs</span> <span class="mi">1</span><span class="p">))))</span>

  <span class="p">(</span><span class="nb">unless</span> <span class="nv">names</span>
    <span class="p">(</span><span class="nv">message</span> <span class="s">"Missing names!"</span><span class="p">)</span>
    <span class="p">(</span><span class="nv">kill-emacs</span> <span class="mi">1</span><span class="p">))</span>

  <span class="p">(</span><span class="nb">dolist</span> <span class="p">(</span><span class="nv">name</span> <span class="p">(</span><span class="nb">nreverse</span> <span class="nv">names</span><span class="p">))</span>
    <span class="p">(</span><span class="nv">message</span> <span class="nv">greeting</span> <span class="nv">name</span><span class="p">))</span>

  <span class="p">(</span><span class="nv">kill-emacs</span> <span class="mi">0</span><span class="p">))</span>
</code></pre>
</div>

<p>Emacs doesn’t interfere with our options and arguments anymore:</p>

<div class="highlighter-rouge"><pre class="highlight"><code>$ ./hello.el --greeting='Hello %s' 'John Doe' 'Donald Duck'
Hello John Doe
Hello Donald Duck
</code></pre>
</div>

<h1 id="standard-output-and-input">Standard output and input</h1>

<p>In the previous examples, we used <code class="highlighter-rouge">message</code> to print text in our script.
There’s a little issue, though.  We can’t properly redirect the output:</p>

<div class="highlighter-rouge"><pre class="highlight"><code>$ ./hello.el 'John Doe' 'Donald Duck' &gt; /dev/null
Hello John Doe!
Hello Donald Duck!
</code></pre>
</div>

<p><code class="highlighter-rouge">message</code> writes to standard <em>error</em>, but a good script should use standard
output.  For this output stream, there’s another, lesser known family of
functions: <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Output-Functions.html#index-print">print</a>, <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Output-Functions.html#index-prin1">prin1</a>, <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Output-Functions.html#index-princ">princ</a> and friends.  All of these functions
output “printed representations” of Lisp objects, with varying levels formatting
and quoting.</p>

<p>For simple printing, <code class="highlighter-rouge">princ</code> is the right candidate, since it prints without any
formatting and quoting.  And naturally the unquoted “printed representation” of
a string is… the string itself, so we can use this function to print a list of
names to standard output:</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="err">#</span><span class="nv">!/bin/sh</span>
<span class="s">":"</span><span class="c1">; exec emacs --quick --script "$0" "$@" # -*-emacs-lisp-*-</span>

<span class="p">(</span><span class="nv">while</span> <span class="nv">argv</span>
  <span class="p">(</span><span class="nb">princ</span> <span class="p">(</span><span class="nb">format</span> <span class="s">"Hello %s!"</span> <span class="p">(</span><span class="nb">pop</span> <span class="nv">argv</span><span class="p">)))</span>
  <span class="p">(</span><span class="nb">terpri</span><span class="p">))</span>

<span class="p">(</span><span class="nv">kill-emacs</span> <span class="mi">0</span><span class="p">)</span>
</code></pre>
</div>

<p>Unlike <code class="highlighter-rouge">message</code>, <code class="highlighter-rouge">princ</code> doesn’t take a format string, so we need to call
<a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Formatting-Strings.html#index-format">format</a> ourselves.  <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Output-Functions.html#index-terpri">terpri</a> is a little utility that just prints a
newline.  The result is as expected, and we can also redirect the output now:</p>

<div class="highlighter-rouge"><pre class="highlight"><code>$ ./hello.el 'John Doe' 'Donald Duck'
Hello John Doe!
Hello Donald Duck!
$ ./hello.el 'John Doe' 'Donald Duck' &gt;/dev/null
</code></pre>
</div>

<p>We have covered standard output now, but what about standard input?  There are
no obvious input functions in Emacs Lisp, but the minibuffer reads from standard
input in batch mode<sup id="fnref:5"><a href="#fn:5" class="footnote">5</a></sup>:</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="err">#</span><span class="nv">!/bin/sh</span>
<span class="s">":"</span><span class="c1">; exec emacs --quick --script "$0" "$@" # -*-emacs-lisp-*-</span>

<span class="p">(</span><span class="k">let</span> <span class="p">(</span><span class="nv">name</span><span class="p">)</span>
  <span class="p">(</span><span class="nv">while</span> <span class="p">(</span><span class="nb">and</span> <span class="p">(</span><span class="k">setq</span> <span class="nv">name</span> <span class="p">(</span><span class="nb">ignore-errors</span> <span class="p">(</span><span class="nv">read-from-minibuffer</span> <span class="s">""</span><span class="p">)))</span>
              <span class="p">(</span><span class="nb">&gt;</span> <span class="p">(</span><span class="nb">length</span> <span class="nv">name</span><span class="p">)</span> <span class="mi">0</span><span class="p">))</span>
    <span class="p">(</span><span class="nb">princ</span> <span class="p">(</span><span class="nb">format</span> <span class="s">"Hello %s!"</span> <span class="nv">name</span><span class="p">))</span>
    <span class="p">(</span><span class="nb">terpri</span><span class="p">)))</span>

<span class="p">(</span><span class="nv">kill-emacs</span> <span class="mi">0</span><span class="p">)</span>
</code></pre>
</div>

<p>We read lines from standard input with <code class="highlighter-rouge">read-from-minibuffer</code>, until an empty
string is read, or an error occurs.  Note that EOF, e.g. <kbd>C-d</kbd> signals
an error, so we can exit the input with <kbd>C-d</kbd> like in other programs.</p>

<div class="highlighter-rouge"><pre class="highlight"><code>$ ./hello.el
John Doe
Hello John Doe!
Donald Duck
Hello Donald Duck!
</code></pre>
</div>

<p>This has limitations, though.  We can only read whole lines, and don’t have
direct access to the underlying TTY.  The former doesn’t really matter, but the
latter limits the graphical capabilities of Emacs scripts and rules out all
curses-like stuff or any text UI.</p>

<p>Even worse, secure text input by reading directly from the TTY is currently
<strong>impossible</strong> in any released version from Emacs: <code class="highlighter-rouge">read-passwd</code> reads from
standard input in batch mode and <strong>exposes</strong> the password input on the terminal.
A patch to hide input on batch mode is committed to Emacs trunk, but as of now,
it will <em>not</em> be part of upcoming Emacs 24.4.  Be careful what you read from
standard input!</p>

<h1 id="debugging">Debugging</h1>

<p>By default, Emacs’ error reporting is pretty terse, in interactive mode as well
as in batch mode:  It just prints the error message, without any backtraces.
Consider this script, which has a little type error inside:</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="err">#</span><span class="nv">!/bin/sh</span>
<span class="s">":"</span><span class="c1">; exec emacs --quick --script "$0" "$@" # -*-emacs-lisp-*-</span>

<span class="p">(</span><span class="nv">message</span> <span class="s">"%S"</span> <span class="p">(</span><span class="nb">+</span> <span class="p">(</span><span class="nb">car</span> <span class="nv">argv</span><span class="p">)</span> <span class="p">(</span><span class="nb">cadr</span> <span class="nv">argv</span><span class="p">)))</span>
<span class="p">(</span><span class="k">setq</span> <span class="nv">argv</span> <span class="no">nil</span><span class="p">)</span>
</code></pre>
</div>

<p>The error message isn’t exactly helpful, though:</p>

<div class="highlighter-rouge"><pre class="highlight"><code>$ ./hello.el 10 20
Wrong type argument: number-or-marker-p, "10"
</code></pre>
</div>

<p>In interactive mode, we debug such errors by simply retrying the command after
<kbd>M-x toggle-debug-on-error</kbd>.  Emacs then enters the debugger and
creates a backtrace if an error occurs.</p>

<p>In batch mode, we can’t “retry”, though, so we need to enable backtraces right
away, by setting <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Error-Debugging.html#index-debug_002don_002derror">debug-on-error</a>:</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="err">#</span><span class="nv">!/bin/sh</span>
<span class="s">":"</span><span class="c1">; exec emacs --quick --script "$0" "$@" # -*-emacs-lisp-*-</span>

<span class="p">(</span><span class="k">setq</span> <span class="nv">debug-on-error</span> <span class="no">t</span><span class="p">)</span>

<span class="p">(</span><span class="nv">message</span> <span class="s">"%S"</span> <span class="p">(</span><span class="nb">+</span> <span class="p">(</span><span class="nb">car</span> <span class="nv">argv</span><span class="p">)</span> <span class="p">(</span><span class="nb">cadr</span> <span class="nv">argv</span><span class="p">)))</span>

<span class="p">(</span><span class="k">setq</span> <span class="nv">argv</span> <span class="no">nil</span><span class="p">)</span>
</code></pre>
</div>

<p>Now we get stracktraces for any error:</p>

<div class="highlighter-rouge"><pre class="highlight"><code>$ ./hello.el 10 20
Debugger entered--Lisp error: (wrong-type-argument number-or-marker-p "10")
  +("10" "20")
  (message "%S" (+ (car argv) (cadr argv)))
  eval-buffer(#&lt;buffer  *load*&gt; nil "/Users/swiesner/Developer/Sandbox/hello.el" nil t)  ; Reading at buffer position 140
  load-with-code-conversion("/Users/swiesner/Developer/Sandbox/hello.el" "/Users/swiesner/Developer/Sandbox/hello.el" nil t)
  load("/Users/swiesner/Developer/Sandbox/hello.el" nil t t)
  command-line-1(("-scriptload" "./hello.el" "10" "20"))
  command-line()
  normal-top-level()
</code></pre>
</div>

<h1 id="keep-your-hands-clean">Keep your hands clean</h1>

<p>As much as we all love Emacs Lisp, it’s not a language that we should use for
scripting or independent programs.  Emacs Lisp is not an independent language
and runtime environment.  It’s tied to Emacs, and Emacs is an interactive text
editor first and foremost.</p>

<p>I wrote this article partly to help you in the rare cases that you actually need to
write non-interactive Emacs Lisp programs (e.g. a runner for your test suite),
but mostly to show how brittle Emacs Lisp is when used outside Emacs.</p>

<p>Don’t get your hands dirty.  Instead, just use any of the plenty of other
languages that are available, e.g. Python, Ruby or whatever.  If you want a
Lisp, use Common Lisp, e.g. <a href="http://www.sbcl.org">SBCL</a>.  Even better, put your hands on a decent
functional language such as OCaml or Haskell.</p>

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>In the early days, we’d muck about with <code class="highlighter-rouge">--no-init-file</code>, <code class="highlighter-rouge">--batch</code> and
  <code class="highlighter-rouge">--load</code> to enter noninteractive mode and load a file. <a href="#fnref:1" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:2">
      <p>See <a href="http://stackoverflow.com/a/6259330/355252">http://stackoverflow.com/a/6259330/355252</a> <a href="#fnref:2" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:3">
      <p>There is also <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Command_002dLine-Arguments.html#index-command_002dline_002dargs">command-line-args</a>, but that holds <em>all</em> Emacs
  options, including those that Emacs already interpreted, and is of little
  use in scripts. <a href="#fnref:3" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:4">
      <p>See <a href="http://stackoverflow.com/a/6807133/355252">http://stackoverflow.com/a/6807133/355252</a> <a href="#fnref:4" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:5">
      <p><a href="http://stackoverflow.com/a/2906967/355252">http://stackoverflow.com/a/2906967/355252</a>.  All credits go to SO here, I’d
  never have figured this out by myself. <a href="#fnref:5" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>