
<p class=" text-justify drop-cap">Like it or not, Git is here to stay, and for many Emacs hackers the best interface to Git is not <em>Git Porcelain</em> – the byzantine commandline interface that we all love to hate – but <em>Magit</em>, a much-improved Git interface for Emacs.</p><p class=" text-justify">A few years ago I wrote about Magit but in the intervening years <em>Team Magit</em>, headed by Jonas Bernoulli, have been hard at work adding new features and making Magit an even better tool. Recently, they released version 2.x, a hallmark release in Magit’s history, and an important turning point for Magit itself, as it breaks “backwards compatibility” (meaning your muscle memory) by moving things around a bit.</p><p class=" text-justify">Before I continue: if you are new to Magit, I recommend you start with my <a href="/article/introduction-magit-emacs-mode-git" class=" article-link">first article about Magit 1.x</a>. A few keys have moved around since then but the overall theme of how Magit works is still accurate. This article will focus on what has <em>changed</em> since Magit 1.x.</p><H2 id="installing-magit-2.x">Installing Magit 2.x</H2><p class=" text-justify"><em>Check your current Magit and Git version by running <code>M-x magit-version</code></em></p><p class=" text-justify">The biggest change is the updated Git requirement. You now need <strong>Git 1.9.4 or later</strong>. If you’re using a recent-ish version of Ubuntu (or its derivatives) then bad luck: the antediluvian version available from its package manager is too old.</p><p class=" text-justify">To upgrade Git itself to 2.x you can run these commands:</p><pre><code>sudo apt-get install python-software-properties
sudo add-apt-repository ppa:git-core/ppa
sudo apt-get update
sudo apt-get install git</code></pre><p class=" text-justify">Next, confirm on the commandline that you are using the newer version:</p><pre><code>$ git --version
git version 2.4.6</code></pre><H3 id="upgrading-magit-in-emacs">Upgrading Magit in Emacs</H3><p class=" text-justify">The first (and only) source of truth is the official manual: <a href="http://magit.vc/manual/magit/Updating-from-an-older-release.html#Updating-from-an-older-release" class=" article-link">Updating from an older release</a>. But the instructions boil down to simply removing all traces of the old <code>magit</code>, <code>git-commit-mode</code> and <code>git-rebase-mode</code> packages. Delete the directories from your <code>elpa/</code> directory and then – the horror – exit and restart your Emacs. And no, you cannot avoid this step. You really have to restart Emacs.</p><H3 id="fresh-magit-install">Fresh Magit Install</H3><p class=" text-justify">Simply install Magit from your local package manager in Emacs.</p><H2 id="whats-new-in-magit-2.x">What’s new in Magit 2.x</H2><p class=" text-justify">The first thing you’ll notice when you run <code>magit-status</code> (I bind it to <code>F10</code>) is how fast it is. A lot of work has gone into making Magit a lot quicker, and the effort has paid off handsomely.</p><p class=" text-justify">The look and feel has changed slightly as well. The colors are different, and Magit now lets you change the look and feel by customizing additional faces. Type <code>M-x customize-group magit-faces</code> to see all the faces.</p><p class=" text-justify">Another new feature is that Magit will now tell you about unsaved buffers. That’s an important change as you sometimes forget to save things (meaning Git doesn’t know about them, and therefore Magit doesn’t either) and you end up only committing some of your work instead of all of it. All in all, a really handy addition.</p><p class=" text-justify">The biggest change is the altered workflow. Magit 2.x deviates sufficiently from its predecessor that it will take you a while to re-train your muscle memory.</p><H3 id="a-manual">A Manual</H3><p class=" text-justify">Magit 1.x had a fine info manual but a lot of people found it hard to get up to speed simply by reading it. But, in all honesty, considering the excellent engineering effort, I never had a problem with the community (myself included) providing blog posts, tips and additional information on how to use Magit.</p><p class=" text-justify">Magit 2.x has a far more in-depth manual, covering all key bindings and popups available.</p><p class=" text-justify">You can <a href="http://magit.vc/manual/magit/index.html#SEC_Contents" class=" article-link">find it here</a> or in <code>C-h i</code> as a separate info manual.</p><H3 id="rebasing">Rebasing</H3><p class=" text-justify">Rebasing is now bound to <code>r</code>. To do an interactive rebase you’d type <code>r e</code>, but its default mode is to ask you to rebase against your current branch. Useful if you want to manicure your own branch, but not useful if you usually do it as part of a rebase onto another branch (say <code>master</code>) as that behavior is now (seemingly) gone. So, you now have to <code>r e</code> <em>first</em>, and <em>then</em> <code>r r</code> onto another branch. Not a big deal.</p><p class=" text-justify">One advantage of the new <code>r e</code> system is that you are given a list of commits in your current branch to rebase <em>from</em>, instead of the older system where you had to enter a commit to rebase from (like <code>HEAD~5</code>) — so for interactive rebasing your current branch, the newer system is better.</p><p class=" text-justify">Another new feature is the ability to edit (<code>r s</code>) and reword (<code>r w</code>) commits using the rebase system. Useful, as you can select a commit from the same list as before to alter and Magit will automatically interactively rebase just that one commit.</p><p class=" text-justify">Dealing with merge issues during rebase is common, and Magit will now show you how far along in the process you are, along with a list of the rebased commits. Very useful.</p><H3 id="cherry-picking">Cherry Picking</H3><p class=" text-justify">Magit’s always had a neat cherry picking functionality, letting you cherry pick arbitrary commits from the commit log. I use it frequently by combining it with range logs to look at commits in other branches.</p><p class=" text-justify">The cherry pick interface is available on <code>A</code>, and you can use it in more places. Practically anything the point is on that is a commit is cherry pick-able in the UI now.</p><H3 id="per-repository-settings">Per-repository settings</H3><p class=" text-justify">You can now control Magit with per-repository settings. What that actually means is that in addition to Git repository-specific configuration you can now do the same for Magit by using Emacs’s <em>directory local variables</em>. See the info manual entry <code>(emacs)Directory Variables</code>.</p><H3 id="changing-popup-defaults">Changing popup defaults</H3><p class=" text-justify">Personally, this is one of my favourite features. Every Magit popup now lets you set the default switches and arguments Magit should use. <code>C-c C-c</code> and <code>C-x C-s</code> now set and save the defaults, exactly like Emacs’s <em>Customize</em> interface.</p><H3 id="git-blame">Git Blame</H3><p class=" text-justify">Magit 1.x had a useful in-buffer blame interface called <code>M-x magit-blame-mode</code>. It had its limitations, and Magit 2.x fixed most of them.</p><p class=" text-justify">First and foremost, the interface is different. For one thing, the command is now <code>M-x magit-blame</code>.</p><table class=" table"><thead><tr class="header"><th style="text-align: left;">Command</th><th style="text-align: left;">Description</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;"><code>RET</code></td><td style="text-align: left;">Shows commit at point</td></tr><tr class="even"><td style="text-align: left;"><code>SPC</code></td><td style="text-align: left;">“DWIM”. Show commit or scroll down</td></tr><tr class="odd"><td style="text-align: left;"><code>DEL</code></td><td style="text-align: left;">As above, but scroll up</td></tr><tr class="even"><td style="text-align: left;"><code>n</code></td><td style="text-align: left;">Move to next chunk</td></tr><tr class="odd"><td style="text-align: left;"><code>p</code></td><td style="text-align: left;">Move to previous chunk</td></tr><tr class="even"><td style="text-align: left;"><code>N</code></td><td style="text-align: left;">Move to next chunk of the same commit</td></tr><tr class="odd"><td style="text-align: left;"><code>P</code></td><td style="text-align: left;">Move to prev. chunk of the same commit</td></tr><tr class="even"><td style="text-align: left;"><code>t</code></td><td style="text-align: left;">Toggles showing commit headings</td></tr><tr class="odd"><td style="text-align: left;"><code>b</code></td><td style="text-align: left;">Opens Blame popup</td></tr><tr class="even"><td style="text-align: left;"><code>b b</code></td><td style="text-align: left;">Blame commit at point</td></tr></tbody></table><p class=" text-justify">All in all, the commands above work as you would expect. <code>b b</code> deserves a special mention as it will pick the commit at point and show it to you — useful if you’re trawling through the history of a file.</p><p class=" text-justify">Your typical workflow would be <code>M-x magit-blame</code> then <code>n</code> and <code>p</code> to move around (or your usual movement commands) and <code>RET</code> to view the commit and its diff, and <code>b b</code> to view the file’s revision.</p><H3 id="the-branch-manager">The Branch Manager</H3><p class=" text-justify">Also known as “Ref Manager”, as that is technically what it shows — anything in Git that is a ref. That includes local branches, remote branches, tags, and so forth.</p><p class=" text-justify">It switched keys and it’s now bound to <code>y</code>.</p><H3 id="previewing-merges">Previewing Merges</H3><p class=" text-justify">You can preview a merge now with <code>m p</code>. If you’re afraid of merges, or if you don’t want the hassle of undoing it after the fact, you can get a diff view of what’ll change and if there are any potential merge conflicts. Very Useful.</p><H3 id="checkout">Checkout</H3><p class=" text-justify">Checking out is a smoother, more improved experience. You can now set and unset the upstream instead of relying on the push command to do it for you. I always thought this was the weakest part of Magit 1.x but I am glad it has been rectified.</p><H2 id="in-conclusion">In Conclusion</H2><p class=" text-justify">Magit 2.x is excellent, and it basically builds on what made Magit 1.x fantastic, too. Yes, things have moved around a bit, but it’s a much better experience all around. It’s hard to capture all the things that makes Magit 2.x greater – the sum of its parts, I suppose. The unified approach to “Do What I Mean” when you highlight a commit with point is one of them; the updated rebase and commit interface is another. The new Ref Manager (<code>y</code>) is also much improved.</p><p class=" text-justify">All in all, a solid upgrade, and an incredible multi-year development effort.</p>
